#include "totvs.ch"
#include "tlpp-core.th"
#include "tlpp-rest.th"

class cbcApiCarga from LongclassName
    public method New()
    public method resumoPeso()
    public method totalPeso()
    public method baixarNota()
    static method validNF()
    static method getPesoExped()
    static method getPesoOS()
    static method getPesoBob()
    static method validCheck()
    static method getCCe()
endclass


method new() class cbcApiCarga
return self


method totalPeso(aCargas) class cbcApiCarga
    local oSql       as object
    local oJsTmp     as object
    local oJsResult  as object
    local oStatic    as object
    local aVol       as array
    local nRecF2     as numeric
    local nX         as numeric
    local cOs        as character
    default aCargas := {}

    oStatic    := IfcXFun():newIfcXFun()
    oJsResult := JsonObject():new()
    oJsResult['PB_NOTA'] := 0
    oJsResult['PB_INT']  := 0
    oJsResult['CHV_NF']  := {}
    oJsResult['ORIGEM']  := ''
    oJsResult['STS']     := .T.
    oJsResult['MSG']     := ''
    if empty(aCargas)
        oJsResult['STS']     := .F.
        oJsResult['MSG']     := 'Nenhuma Carga'
    else
        DbSelectArea('ZZ9')
        oSql        := LibSqlObj():newLibSqlObj()
        for nX := 1 to len(aCargas)
            oSql:newAlias(oStatic:sP(2):callStatic('cbcQryCarga', 'qryAddView', aCargas[nX], ''))
                if !oSql:hasRecords()
                    oJsResult['STS']  := .F.
                    oJsResult['MSG']  := 'Carga '+ aCargas[nX] +' Inexistente'
                else
                    oSql:goTop()
                    while oSql:notIsEof()
                        cOs := AllTrim(oSql:getValue("OS"))
                        oJsResult['ORIGEM']  := AllTrim(oSql:getValue("FILORI"))
                        aVol  := {{oStatic:sP(1):callStatic('cbcManifesto', 'findOSNF', cOS),,oStatic:sP(2):callStatic('cbcManifesto', 'findOSCli',cOS, AllTrim(oSql:getValue("FILORI")))}}
                        if ! (oJsTmp := ::validNF(aVol, @oJsResult['PB_NOTA'],cOs, .F.,,AllTrim(oSql:getValue("FILORI"))))['STS']
                            oJsResult['STS']     := .F.
                            oJsResult['MSG']     +=  oJsTmp['MSG'] + '.'
                        else
                            aadd(oJsResult['CHV_NF'], oJsTmp['CHAVE'])
                            if(nRecF2 := oJsTmp['REC']) > 0
                                ::getPesoBob(nRecF2, @oJsResult['PB_INT'],cOs,.F., oJsResult['ORIGEM'])
                            endif
                        endif
                        if ! (oJsTmp := ::getPesoExped(cOs,@oJsResult['PB_INT'], .F., oJsResult['ORIGEM'], oJsResult['PB_NOTA']))['STS']
                            oJsResult['STS']     := .F.
                            oJsResult['MSG']     +=  oJsTmp['MSG'] + '.'
                        endif                       
                        oSql:skip()
                    enddo
                    ::getCCe(@oJsResult)
                endif
            oSql:close()
        next nX 
    endif
return oJsResult


method resumoPeso(cCarga) class cbcApiCarga
    local oSql       as object
    local oVol       as object 
    local oCarga     as object
    local oTemp      as object
    local oStatic    as object
    local aVol       as array
    local aOrigVol   as array
    local cOs        as character
    local oJsResult  as object
    Default cCarga   := ""
    
    oStatic := IfcXFun():newIfcXFun()
    DbSelectArea('ZZ9')
    oJsResult   := JsonObject():new()
    if Empty(cCarga)
        oJsResult['STS']        := .F.
        oJsResult['MSG']        := 'OC nao informada'
    else
        TRY
            oCarga      := cbcCtrlCarga():newcbcCtrlCarga()
            oVol        := cbcCtrlVolum():newcbcCtrlVolum()
            oSql        := LibSqlObj():newLibSqlObj()

            oCarga:define(cCarga)
            oSql:newAlias(oStatic:sP(2):callStatic('cbcQryCarga', 'qryAddView', cCarga, ''))
            oJsResult['OC']         := cCarga
            oJsResult['PB_NOTA']    := 0
            oJsResult['PB_OS']      := 0
            oJsResult['PB_EXP']     := 0
            oJsResult['PB_BOB']     := 0
            oJsResult['DATA']       := {}        
            oJsResult['STS']        := .T.
            oJsResult['MSG']        := ''
            if !oSql:hasRecords()
                oJsResult['STS']        := .F.
                oJsResult['MSG']        := 'Carga Inexistente'
            else
                oSql:goTop()
                while oSql:notIsEof()
                    oTemp := JsonObject():new()
                    aVol := {}
                    cOs := AllTrim(oSql:getValue("OS"))
                    oTemp['NroOs'] := cOs
                    aOrigVol := oVol:loadVolumes(cCarga,cOs)
                    oStatic:sP(5):callStatic('cbcManifesto', 'mntDados', 'DET', nil, @aVol, aOrigVol, .T.)
                    oTemp['Origem']     := aOrigVol[01,03]
                    oTemp['NroNf']      := Alltrim(aVol[01,01])
                    // PesoBruto(OS)
                    oTemp['Carga']      := ::getPesoOS(aVol,@oJsResult['PB_OS'],cOs)
                    // PesoBruto(NF)
                    oTemp['Nota']       := ::validNF(aVol, @oJsResult['PB_NOTA'],cOs, .T., aggPesVol(aOrigVol), aOrigVol[01,03])
                    // PesoBruto(Exped)
                    oTemp['Interno']    := ::getPesoExped(cOs,@oJsResult['PB_EXP'], .T.,oTemp['Origem'],oJsResult['PB_NOTA'])
                    // PesoBruto(Bobinas)
                    oTemp['Bobinas']    := ::getPesoBob(oTemp['Nota']['REC'],@oJsResult['PB_BOB'],cOs,.T., oTemp['Origem'])
                    // Obter cartas de correção
                    oTemp['CHV_NF']     := {oTemp['Nota']['CHAVE']}                    
                    ::getCCe(@oTemp) 
                    aadd(oJsResult['DATA'], oTemp)
                    oSql:skip()
                endDo
                ::validCheck(@oJsResult)
            endif
            oSql:close()
        CATCH oError
            oJsResult['STS']        := .F.
            oJsResult['MSG']        := oError:description
        FINALLY
            FreeObj(oSql)
            FreeObj(oVol)
            FreeObj(oCarga)
        ENDTRY
    endif
return oJsResult


method getPesoBob(nRecSF2, nPesoBruto, cOs, lDet, cFili) class cbcApiCarga
    local aArea    	    := GetArea()
    local aAreaSF2 	    := {}
    local aBob          as array
    local jBob          as object
    local oSql          as object
    default cOs         := ''
    default nRecSF2     := 0
    default nPesoBruto  := 0
    default lDet        := .T.
    aBob    := {}
    if nRecSF2 > 0
        ChkFile('SF2')
        DbSelectArea('SF2')
        aAreaSF2 := GetArea()
        SF2->(DbGoTo(nRecSF2))
        if AllTrim(SF2->F2_FILIAL) == AllTrim(cFili)
            oJson   := JsonObject():new()
            oSql    := LibSqlObj():newLibSqlObj()
            oSql:newAlias(bobQry(nRecSF2,cOs))
            if oSql:hasRecords()
                oSql:goTop()
                while oSql:notIsEof()
                nPesoBruto += oSql:getValue("PESO_BOBINA")
                if lDet
                    jBob              := JsonObject():new()
                    jBob['NRO_BOB']   := oSql:getValue("NRO_BOBINA")
                    jBob['TP_BOB']    := oSql:getValue("TP_BOBINA")
                    jBob['MTR_BOB']   := oSql:getValue("MTR_BOB")
                    jBob['P_BOB']     := oSql:getValue("PESO_BOBINA")
                    aadd(aBob,jBob)
                endif
                oSql:skip()
                endDo
            endif
            oSql:close()
            FreeObj(oSql)
        endif
        RestArea(aAreaSF2)
    endif
    RestArea(aArea)
return aBob


method baixarNota(oJsChve) class cbcApiCarga
    local nX        as numeric
    local aDadosZF  as array
    local oInstSZF  as object
    local dData     as date
    local cHora     as character 
    local oJson     as object

    oJson := JsonObject():new()
    oJson['STS']  := .T.
    oJson['MSG']  := ''
    if empty(oJsChve['CHAVES'])
        oJson['STS']  := .F.
        oJson['MSG']  := 'Nenhuma chave informada'
    else
        dData 		:= Date()
        cHora 		:= Substr(Time(), 1, 5)    
        aDadosZF    := {}
        for nX := 1 to len(oJsChve['CHAVES'])
            aAdd(aDadosZF,{;
            {"FILIAL",	FwFilial()},;
            {"DATA",	Dtos(dData)},;
            {"HORA",	cHora},;
            {"TRANS",	oJsChve['TRANS']},;
            {"CARREG",	oJsChve['CARREG']},;
            {"MOTOR",	oJsChve['MOTOR']},;
            {"CHAVE",	oJsChve['CHAVES'][nX] }})
        next nX
        if !empty(aDadosZF)
            oInstSZF := CbcSZFCtrl():NewCbcSZFCtrl()
            if (GetNewPar('ZX_BXANFT', .T.))
                if !oInstSZF:ConfSZF(aDadosZF):isOk()
                    oJson['STS']  := .F.
                    oJson['MSG']  := oInstSZF:getMsgErr()
                endif
            else
                oJson['MSG'] := aDadosZF
            endif
            FreeObj(oInstSZF)
        endif
    endif
return oJson


method validNF(aVol, nPesoBruto, cOs, lDet, aVolPes, cFili) class cbcApiCarga
    local aNota         as array
    local aCli          as array
    local oSql          as object
    local oJson         as object
    default cOs         := ''
    default nPesoBruto  := 0
    default lDet        := .T.
    default aVolPes     := {}

    oJson := JsonObject():new()
    if Empty(aVol[01, 01])
        oJson['STS']            := .F.
        oJson['MSG']            := 'Nota Fiscal nao encontrada'
    elseif Empty(aVol[01, 03])
        oJson['STS']            := .F.
        oJson['MSG']            := 'Cliente nao encontrado'
    else
        oJson['NF']         := Alltrim(aVol[01, 01])
        oJson['CLI']        := Alltrim(aVol[01, 03])
        oJson['VOL_PES']    := aClone(aVolPes)
        aNota := StrToKArr(oJson['NF'], '/')
        aCli  := StrToKArr(oJson['CLI'], '-')
        if (len(aNota) < 2) .Or. (Len(aCli) < 1)
            oJson['STS']            := .F.
            oJson['MSG']            := 'Formato nota cliente invalido'
        else
            oSql := LibSqlObj():newLibSqlObj()
            oSql:newAlias(nfeQry(aNota[1], aNota[2], aCli[1], Alltrim(cFili)))
            if !oSql:hasRecords()
                oJson['STS']            := .F.
                oJson['MSG']            := 'NF ' + Alltrim(oJson['NF']) + ' nao emitida'
            else
                oSql:goTop()
                if(Empty(oSql:getValue("CHAVE_NFE")) .Or. Empty(oSql:getValue("PROTOCOLO")) )
                    oJson['STS']            := .F.
                    oJson['MSG']            := 'NF ' + Alltrim(oJson['NF']) + ' Sem Protocolo'
                else
                    nPesoBruto += oSql:getValue("PESO_BRUTO")
                    oJson['REC']   := oSql:getValue("RECNO")
                    oJson['CHAVE'] := oSql:getValue("CHAVE_NFE")
                    if lDet
                        oJson['VOL']        := Alltrim(oSql:getValue("VOLUMES"))
                        oJson['P_LIQ']      := oSql:getValue("PESO_LIQUIDO")
                        oJson['PROT']       := Alltrim(oSql:getValue("PROTOCOLO"))
                        oJson['P_BRU']      := oSql:getValue("PESO_BRUTO")
                    endif
                    oJson['DET_PROD']       := u_cbcQRYexec(detNfOs(cOs, oSql:getValue("RECNO"), Alltrim(cFili)))
                    oJson['STS']        := .T.
                    oJson['MSG']        := ''
                endif
            endif
            oSql:close()
            FreeObj(oSql)
        endif
    endif
return oJson


method getPesoExped(cOs, nPesoBruto, lDet, cFili, nPesNF) class cbcApiCarga
    local oRest     as object
    local oJson     as object
    local oApiJs    as object
    local aJs       as array
    local cUrlApi   as character
    local aHeader   as array
    local nX        as numeric
    Local bErro		as object
    default cOs         := ''
    default nPesoBruto  := 0
    default lDet        := .T.
    default cFili       := xFilial("SF2")
    default nPesNF      := 0
    
    cUrlApi := AllTrim(GetNewPar("ZZ_PESDAPI","https://192.168.1.220:3293"))
    aHeader := {}
    aJs     := {}
    aadd(aHeader, 'Content-Type: application/json')
    oJson   := JsonObject():new()
    oApiJs  := JsonObject():new()
    oJson['STS']    := .T.
    oJson['MSG']    := ''
    bErro := ErrorBlock({|oErr| HandleEr(oErr, oJson)})
    BEGIN SEQUENCE
        if Empty(cOs)
            oJson['STS'] := .F.
            oJson['MSG'] := 'OS inexistente'
        else
            if cFili <> xFilial("SF2")
                nPesoBruto := nPesNF
                if lDet
                    oJson['P'] := aJs
                endif
            else
                oRest := FWRest():New(cUrlApi)
                oRest:SetPath("/pesagems?filter[where][ordemSeparacao]="+Alltrim(cOs))
                if (oRest:Get(aHeader))
                    cJsInvent := '{"data": ' + oRest:GetResult() + '}'
                    oApiJs:fromJson(cJsInvent)
                    if len(oApiJs['data']) == 0
                        oJson['STS'] := .F.
                        oJson['MSG'] := 'OS:' + cOs + '-Sem unidades de pesagens'
                    else
                        for nX := 1 to Len(oApiJs['data'])
                            oApiJs['data'][nX]['nPesoBruto'] := 0
                            if oApiJs['data'][nX]['pesagem']
                                if oApiJs['data'][nX]['paletizar']
                                    oApiJs['data'][nX]['nPesoBruto'] := oApiJs['data'][nX]['peso']
                                else
                                    oApiJs['data'][nX]['nPesoBruto'] := (oApiJs['data'][nX]['peso'] -;
                                    oApiJs['data'][nX]['tara'])
                                endif
                            elseif oApiJs['data'][nX]['estorno']
                                if oApiJs['data'][nX]['paletizar']
                                    oApiJs['data'][nX]['nPesoBruto'] -= oApiJs['data'][nX]['peso']
                                else
                                    oApiJs['data'][nX]['nPesoBruto'] -= (oApiJs['data'][nX]['peso'] -;
                                     oApiJs['data'][nX]['tara'])
                                endif
                            elseif oApiJs['data'][nX]['manual']
                                oApiJs['data'][nX]['nPesoBruto'] += oApiJs['data'][nX]['tara']
                            endif
                            nPesoBruto += oApiJs['data'][nX]['nPesoBruto'] 
                            if lDet
                                aadd(aJs, oApiJs['data'][nX])
                            endif
                        next nX
                        if lDet
                            oJson['P'] := aJs
                        endif
                    endif
                endif
                FreeObj(oRest)
            endif
        endif
        RECOVER
    END SEQUENCE
    ErrorBlock(bErro)
return oJson


method getPesoOS(aVol, nPesoBruto, cOs) class cbcApiCarga
    local oJson         as object
    local oStatic       as object
    default aVol        := {}
    default nPesoBruto  := 0

    oStatic    := IfcXFun():newIfcXFun()
    oJson := JsonObject():new()
    if empty(aVol)
        oJson['STS']        := .F.
        oJson['MSG']        := 'volumes vazios'
    elseif empty(aVol[01, 02])    
        oJson['STS']        := .F.
        oJson['MSG']        := 'Sem volumes'
    else    
        nPesoBruto          += aVol[01, 10]
        oJson['Fardos']     := aVol[01, 04]
        oJson['Carreteis']  := aVol[01, 05]
        oJson['Bobina']     := aVol[01, 06]
        oJson['Pallet']     := aVol[01, 07]
        oJson['Caixas']     := aVol[01, 08]
        oJson['Rolos']      := aVol[01, 09]
        oJson['PesoBruto']  := aVol[01, 10]     
        oJson['PesoLiqui']  := aVol[01, 11]
        oJson['PesoTara']   := aVol[01, 12]
        oJson['Esp']        := Alltrim(oStatic:sP(2):callStatic('cbcCtrlVolum', 'makeStrVol', aVol[1], {}))
        oJson['STS']        := .T.
        oJson['MSG']        := ''
    endif
return oJson


method validCheck(oJs) class cbcApiCarga
    local nX    as numeric
    local cMsg  as character
    local cOs   as character
    cMsg  := ''
    for nX := 1 to len(oJs['DATA'])
       cOs := oJs['DATA'][nX]['NroOs']
       if !oJs['DATA'][nX]['Nota']['STS']
			cMsg += cOs + '-' + oJs['DATA'][nX]['Nota']['MSG'] + '.' 
       endif
       if !oJs['DATA'][nX]['Carga']['STS']
			cMsg += cOs + '-' + oJs['DATA'][nX]['Carga']['MSG'] + '.'
       endif
       if !oJs['DATA'][nX]['Interno']['STS']
			cMsg += cOs + '-' + oJs['DATA'][nX]['Interno']['MSG'] + '.'
       endif
    next nX
    if !Empty(cMsg)
        oJs['STS'] := .F.
        oJs['MSG'] +=  '. ' + cMsg 
    endif
return self


method getCCe(oJsRes) class cbcApiCarga
    local oTSSDb    as object
    local cQuery    as character
    local cSqlAlias as character

    oJsRes['CCE']   := {}
    oTSSDb := FWDBAccess():New("MSSQL/IFC_NFE_P12", "192.168.25.2", 7890)
    if !oTSSDb:OpenConnection()
         oJsRes['STS'] := .F.
         oJsRes['MSG'] += 'NF' + AllTrim(oTSSDb:ErrorMessage()) + '.'
    else
        cQuery := xmlQry(oJsRes['CHV_NF'])
        cSqlAlias := oTSSDb:NewAlias(cQuery, GetNextAlias(), {})
        if oTSSDb:HasError()
            oJsRes['STS'] := .F.
            oJsRes['MSG'] += 'NF' + AllTrim(oTSSDb:ErrorMessage()) + '.'
        else
             if Select(cSqlAlias) <= 0
                oJsRes['STS'] := .F.
                oJsRes['MSG'] += 'NF' + AllTrim(oTSSDb:ErrorMessage()) + '.'
                oTSSDb:ClearError()
            else
                (cSqlAlias)->(DbGoTop())
                while (cSqlAlias)->(!Eof())
                    aadd(oJsRes['CCE'],{(cSqlAlias)->(NFE_CHV),;
                    DtoC(StoD((cSqlAlias)->(DATE_EVEN))),;
                    (cSqlAlias)->(TIME_EVEN),;
                    txtCC((cSqlAlias)->(TMEMO1))})
                    			
                    (cSqlAlias)->(DbSkip())
                enddo
                (cSqlAlias)->(DBCloseArea())
            endif
        endif
        if oTSSDb:CloseConnection()
            oTSSDb:Finish()
        endif
    endif
    FreeObj(oTSSDb)
return


/* STATIC*/
static function txtCC(cXml)
    local cTxt  as character
    local oXML  as object
    cTxt := ''
    oXML := TXmlManager():New()
    if oXML:Parse(cXml)
        cTxt := oXml:XPATHGETNODEVALUE('/infEvento/detEvento/xCorrecao')
    endif
    FreeObj(oXML)
return cTxt


static function aggPesVol(aReq)
    local nX        as numeric
    local nY        as numeric
    local nPos      as numeric
    local cAcond    as character
    local nPeso     as numeric
    local nQtd     as numeric
    local aResp     as array
    aResp := {}
    for nX := 1 to len(aReq)
        for nY := 1 to len(aReq[nX][2]['VOLUMES'][1][3])
            cAcond  := aReq[nX][2]['VOLUMES'][1][3][nY][1]
            nPeso   := aReq[nX][2]['VOLUMES'][1][3][nY][3]
            nPeso   := aReq[nX][2]['VOLUMES'][1][3][nY][3]
            nQtd    := aReq[nX][2]['VOLUMES'][1][3][nY][4]
            if (nPos := aScan(aResp, {|x| AllTrim(x[1]) == AllTrim(cAcond)})) > 0
                aResp[nPos][2] += nPeso
                aResp[nPos][3] += nQtd
            else
                aadd(aResp, {cAcond, nPeso, nQtd})
            endif
        next nY  
    next nX
return aResp


/* QUERYS*/
static function xmlQry(aChv)
    local cQry  as character
    local nX    as numeric
    default aChv := {}
    cQry := ""
    if !empty(aChv)
        cQry += " SELECT "
        cQry += " DATE_EVEN, "
        cQry += " TIME_EVEN, "
        cQry += " CSTATEVEN, "
        cQry += " PROTOCOLO, "
        cQry += " NFE_CHV, "
        cQry += " ISNULL(CONVERT(VARCHAR(8000),CONVERT(VARBINARY(8000),XML_ERP)),'') AS TMEMO1 "
        cQry += " FROM SPED150 WITH(NOLOCK)"
        cQry += " WHERE "
        cQry += " NFE_CHV IN ( "
        for nX := 1 to Len(aChv)
            cQry += "'" + Alltrim(aChv[nX]) + "'"
            if nX < Len(aChv)
                cQry += ', '
            endif
        next nX
        cQry += ") "
        cQry += " AND TPEVENTO = '110110' "
        cQry += " AND STATUS = 6  "
        cQry += " AND AMBIENTE = 1 "
        cQry += " AND PROTOCOLO <> '' "
        cQry += " AND D_E_L_E_T_ = ' ' " 
        cQry += " ORDER BY NFE_CHV,DATE_EVEN,TIME_EVEN DESC "
    endif
return cQry


static function transpQry()
    local cQry as character
    cQry := " SELECT " 
    cQry += " A4_COD			    as [Cod], "
    cQry += " RTRIM(LTRIM(A4_NOME))	as [Nome], "
    cQry += " A4_CGC				as [Cnpj] "
    cQry += " FROM " + RetSqlNAme('SA4')+ " WITH(NOLOCK) "
    cQry += " WHERE  "
    cQry += " A4_MSBLQL <> 1 "
    cQry += " AND A4_CGC <> '' "
    cQry += " AND D_E_L_E_T_ = '' "
    cQry += " ORDER BY A4_COD "
return cQry


static function bobQry(nRecSF2,cOs)
    local cQry as character
    cQry := " SELECT " 
	cQry += " ZZR.ZZR_NROBOB AS NRO_BOBINA, "
    cQry += " 'B'+RTRIM(LTRIM(SZE.ZE_TPBOB)) AS TP_BOBINA, "
    cQry += " SZE.ZE_QUANT AS MTR_BOB, "
	cQry += " (ZZR.ZZR_EMBALA + ZZR.ZZR_PESPRO) AS PESO_BOBINA "
	cQry += " FROM " + RetSqlNAme('SF2') + " SF2 WITH(NOLOCK) "
	cQry += " INNER JOIN " + RetSqlNAme('ZZR') + " ZZR WITH(NOLOCK) ON "
	cQry += " SF2.F2_FILIAL		 = ZZR.ZZR_FILIAL "
	cQry += " AND '" + cOs +"'	 = ZZR.ZZR_OS "
	cQry += " AND SF2.F2_DOC	 = ZZR.ZZR_DOC "
	cQry += " AND SF2.F2_SERIE	 = ZZR.ZZR_SERIE "
	cQry += " AND SF2.D_E_L_E_T_ = ZZR.D_E_L_E_T_ "
    cQry += " INNER JOIN " + RetSqlNAme('SZE') + " SZE WITH(NOLOCK) ON "
	cQry += " ZZR.ZZR_FILIAL     = SZE.ZE_FILIAL "
	cQry += " AND ZZR.ZZR_NROBOB = SZE.ZE_NUMBOB "
	cQry += " AND ZZR.D_E_L_E_T_ = SZE.D_E_L_E_T_ "
    cQry += " WHERE  "
	cQry += " SF2.R_E_C_N_O_ = " + cValToChar(nRecSF2)
    cQry += " AND ZZR.ZZR_NROBOB <> '' "
    cQry += " AND SF2.D_E_L_E_T_ = ''
return cQry


static function nfeQry(cNota, cSerie, cCliLoja, cFili) 
    local cQry as character
    default cFili := FwFilial()
    cQry := " SELECT "
	cQry += " F2.R_E_C_N_O_ AS [RECNO], "
	cQry += " F2_ESPECI1    AS [VOLUMES], "
	cQry += " F2.F2_PBRUTO  AS [PESO_BRUTO], "
	cQry += " F2.F2_PLIQUI  AS [PESO_LIQUIDO], "
	cQry += " F2.F2_CODNFE  AS [PROTOCOLO], "
	cQry += " F2.F2_CHVNFE  AS [CHAVE_NFE] "
    cQry += " FROM  "
    cQry +=   RetSqlName('SF2') + " F2 WITH(NOLOCK) "
    cQry += " WHERE "
    cQry += " F2.F2_FILIAL      = '"+ cFili +"' "
    cQry += " AND F2.F2_DOC     = '"+Alltrim(cNota)+"' "
    cQry += " AND F2.F2_SERIE   = '"+Alltrim(cSerie)+"' "
    cQry += " AND (F2.F2_CLIENTE + F2.F2_LOJA) = '"+Alltrim(cCliLoja)+"' "
    cQry += " AND F2.D_E_L_E_T_ = '' "
return cQry


static function detNfOs(cOs, nRecF2, cFili)
    local cQry as character
    default cFili := FwFilial()
    cQry := " SELECT "
    cQry += " SB1.B1_COD AS COD_P, "
	cQry += " SB1.B1_DESC AS DES_P, "
	cQry += " SUM(ZZR.ZZR_LANCES)  AS LANCE, "
	cQry += " SD2.D2_LOCALIZ AS ACOND, "
	cQry += " SUM(SD2.D2_QUANT)  AS QTD_FAT_TOTAL, "
	cQry += " SUM(ZZR.ZZR_PESPRO + ZZR.ZZR_EMBALA)	AS PESO_EXP, "
    cQry += " SUM(ZZR.ZZR_PESPRO)						AS PESO_PROD, "
    cQry += " SUM(ZZR.ZZR_EMBALA)						AS PESO_EMB, "
	cQry += " SUM(SB1.B1_PESBRU * SD2.D2_QUANT) AS PES_BRUT_CAD, "
	cQry += " SUM((SB1.B1_PESCOB + SB1.B1_PESPVC) * SD2.D2_QUANT) AS COB_PVC_CAD "
    cQry += " FROM ZZ9010 ZZ9  WITH (NOLOCK) "
    cQry += " INNER JOIN SC9010 SC9 WITH (NOLOCK) ON ZZ9.ZZ9_FILIAL = SC9.C9_FILIAL "
    cQry += " AND ZZ9.ZZ9_ORDSEP = SC9.C9_PEDIDO + SC9.C9_SEQOS "
    cQry += " AND ZZ9.D_E_L_E_T_ = SC9.D_E_L_E_T_ "
    cQry += " INNER JOIN SC5010 SC5 WITH (NOLOCK) ON SC9.C9_FILIAL = SC5.C5_FILIAL "
    cQry += " AND SC9.C9_PEDIDO = SC5.C5_NUM  "
    cQry += " AND SC9.D_E_L_E_T_ = SC5.D_E_L_E_T_ "
    cQry += " INNER JOIN SA1010 SA1 WITH (NOLOCK) ON '' = SA1.A1_FILIAL "
    cQry += " AND SC5.C5_CLIENTE = SA1.A1_COD "
    cQry += " AND SC5.C5_LOJACLI = SA1.A1_LOJA "
    cQry += " AND SC5.D_E_L_E_T_ = SA1.D_E_L_E_T_ "
    cQry += " INNER JOIN SB1010 SB1 WITH (NOLOCK) ON '' = SB1.B1_FILIAL "
    cQry += " AND SC9.C9_PRODUTO    = SB1.B1_COD "
    cQry += " AND SC9.D_E_L_E_T_    = SB1.D_E_L_E_T_ "
    cQry += " INNER JOIN SD2010 SD2 WITH (NOLOCK) ON ZZ9.ZZ9_FILIAL = SD2.D2_FILIAL "
    cQry += " AND ZZ9.ZZ9_DOC		= SD2.D2_DOC "
    cQry += " AND ZZ9.ZZ9_SERIE	    = SD2.D2_SERIE "
    cQry += " AND SC9.C9_PEDIDO     = SD2.D2_PEDIDO "
    cQry += " AND SC9.C9_ITEM		= SD2.D2_ITEMPV "
    cQry += " AND SA1.A1_COD		= SD2.D2_CLIENTE "
    cQry += " AND SA1.A1_LOJA		= SD2.D2_LOJA "
    cQry += " AND SD2.D_E_L_E_T_	= ''  "
    cQry += " INNER JOIN SF2010 SF2 WITH (NOLOCK) ON SD2.D2_FILIAL = SF2.F2_FILIAL "
    cQry += " AND SD2.D2_DOC		= SF2.F2_DOC "
    cQry += " AND SD2.D2_SERIE	    = SF2.F2_SERIE "
    cQry += " AND SD2.D2_CLIENTE	= SF2.F2_CLIENTE "
    cQry += " AND SD2.D2_LOJA		= SF2.F2_LOJA "
    cQry += " AND SD2.D_E_L_E_T_	= SF2.D_E_L_E_T_ "
    cQry += " INNER JOIN ZZR010 ZZR WITH (NOLOCK) ON  "
    cQry += " SD2.D2_FILIAL		    = ZZR.ZZR_FILIAL "
    cQry += " AND SD2.D2_PEDIDO	    = ZZR.ZZR_PEDIDO "
    cQry += " AND SD2.D2_ITEMPV	    = ZZR.ZZR_ITEMPV "
    cQry += " AND SD2.D2_SEQOS	    = ZZR.ZZR_SEQOS "
    cQry += " AND SD2.D_E_L_E_T_	= ZZR.D_E_L_E_T_ "
    cQry += " WHERE ZZ9.ZZ9_FILIAL = '" + cFili + "' "
    cQry += " AND ZZ9.ZZ9_ORDSEP = '"+ cOs +"'  "
    cQry += " AND SF2.R_E_C_N_O_		= " + cValToChar(nRecF2)
    cQry += " AND ZZ9.D_E_L_E_T_ = '' "
    cQry += " GROUP BY SB1.B1_COD,SB1.B1_DESC, SD2.D2_LOCALIZ "
return cQry


/* API_REST */
/*
    Leonardo Bolognesi
    07/05/2021
    POST: http://192.168.1.220:9938/ws/CBCWMS/CARGA
    {"ocl": ['00000224','00001063','00001075']}
    u_zxApiCarga({'00000224','00001063','00001075'})
    Obter os totaliadores de peso,
    para uma lista de ordens de carga 
    Retornar (Peso NF, Peso Interno(Exped+Bob)), Lista chave se
    acesso e lista de cartas de correção
    Retorno:
    {
        "CHV_NF": ["50210502544042000208550010000868391100219650"],
        "CCE": [["50210502544042000208550010000868391100219650",
            "2021/05/10", "08:06:31", "TOTAL DE VOLUMES 26 SENDO 9 bobinas + 17 Fardos"]
        ],
        "PB_NOTA": 0.0,
        "STS": false,
        "PB_INT": 0.0,
        "MSG":"MotivoSTS"
    }
*/
@Post("CBCWMS/CARGA")
user function zxApiCarga(aOC)
    local jBody     as object
    local jRet       as object
    local oCbcCarga  as object
    local oRet       as object 
    oCbcCarga       := cbcApiCarga():new()
    if (Type("oRest") != 'U')
        jBody  := JsonObject():new()
        jRet   := JsonObject():new()
        jBody:fromJson( oRest:GetBodyRequest() )
        if ( jBody <> Nil )
            jRet  := oCbcCarga:totalPeso(jBody['ocl'])
        endif
        oRet := oRest:setResponse(jRet:toJSon())
    else
        oRet := oCbcCarga:totalPeso(aOC)   
    endif
    FreeObj(oCbcCarga)
return oRet


/*
    Leonardo Bolognesi
    07/05/2021
    http://192.168.1.220:7873/ws/CBCWMS/DETCARGA?numero=00001063
    u_zApDtCar('00001063')
    Obter os detalhes de uma carga,ver json exemplo mais a baixo
*/
@Get("CBCWMS/DETCARGA")
user function zApDtCar(cCarga)
    local jQuery     as object
    local jRet       as object
    local oCbcCarga  as object
    local oRet       as object 
    oCbcCarga       := cbcApiCarga():new()
    if (Type("oRest") != 'U')
        jQuery     := JsonObject():new()
        jRet       := JsonObject():new()
        jQuery     := oRest:getQueryRequest()
        if (jQuery <> Nil)
            jRet  := oCbcCarga:resumoPeso(jQuery['numero'])
        endif
        oRet      := oRest:setResponse(jRet:toJSon())
    else
        oRet      := oCbcCarga:resumoPeso(cCarga)   
    endif
    FreeObj(oCbcCarga)
return oRet


/*
    Leonardo Bolognesi
    07/05/2021
    POST: http://192.168.1.220:9938/ws/CBCWMS/BAIXANF
    oJsChve := {
        "CHAVES": ['000000','3333333'],
        "TRANS": "",
        "CARREG": "",
        "MOTOR": ""
    }
    u_zApBxChv({"CHAVES": {'000000','3333333'}, "TRANS": "", "CARREG": "", "MOTOR": ""})
    TRANS  = Codigo Transportadora SF4
    CARREG = Carregador
    MOTOR  = Motorista
    Informações saida de nota cria SZF e atualiza SF2
*/
@Post("CBCWMS/BAIXANF")
user function zApBxChv(oJsChve)
    local oCbcCarga  as object
    local oRet       as object
    local jBody      as object
    local jRet       as object

    oCbcCarga       := cbcApiCarga():new()
        if (Type("oRest") != 'U')
            jBody  := JsonObject():new()
            jRet   := JsonObject():new()
            jBody:fromJson( oRest:GetBodyRequest() )
            if ( jBody <> Nil )
                jRet  := oCbcCarga:baixarNota(jBody)
            endif
            oRet := oRest:setResponse(jRet:toJSon())
        else
            oRet := oCbcCarga:baixarNota(oJsChve)
        endif
    FreeObj(oCbcCarga)
return oRet


/*
    Leonardo Bolognesi
    10/05/2021
    POST: http://192.168.1.220:9938/ws/CBCWMS/NFCCE
    oJsChve := {
        "CHV_NF": [
            '50210502544042000208550010000867531100231432',
            '50210502544042000208550010000868391100219650'
        ],
        "STS": true,
        "MSG": ""
    }
    u_zApCCe({'50210502544042000208550010000867531100231432','50210502544042000208550010000868391100219650'})
    Obtem informações sobre as cartas de correção
    {
        "STS": true,
        "CCE": [
            [
            "50210502544042000208550010000867531100231432",
            "2021/05/07",
            "14:34:12",
            "CORRETO  TRANSPORTE RODOMAF"
            ]
        ],
        "CHV_NF": [],
        "MSG": ""
    }
*/
@Post("CBCWMS/NFCCE")
user function zApCCe(aChave)
    local oCbcCarga as object
    local oJsResult as object
    local oRet      as object
    local jBody     as object

    oCbcCarga       := cbcApiCarga():new()
    if (Type("oRest") != 'U')
        jBody  := JsonObject():new()
        jBody:fromJson( oRest:GetBodyRequest() )
        if ( jBody <> Nil )
           oCbcCarga:getCCe(@jBody)
        endif
        oRet := oRest:setResponse(jBody:toJSon())
    else
        oJsResult := {"CHV_NF": aChave , "STS": .T., "MSG": ""}
        oCbcCarga:getCCe(@oJsResult)
        oRet := oJsResult
    endif
    FreeObj(oCbcCarga)
return oRet


/*
    Leonardo Bolognesi
    07/05/2021
    GET: http://192.168.1.220:9938/ws/CBCWMS/TRANSP
    u_zApTrasp()
    Retorna codigo e nome da transportadora SA4
*/
@Get("CBCWMS/TRANSP")
user function zApTrasp()
    local jRet       as object
    local oRet       as object 
    if (Type("oRest") != 'U')
        jRet      := u_cbcQRYexec(transpQry()) 
        oRet      := oRest:setResponse(jRet:toJSon())
    else
        oRet      := u_cbcQRYexec(transpQry())   
    endif
return oRet


/*
    Leonardo Bolognesi
    07/05/2021
    http://192.168.1.220:7873/ws/CBCWMS/ESPNOTA?chave=00001063
    u_zApEspNf('00001063')
    Obter espelho da nota com Produto-Peso-Quantidade
*/
@Get("CBCWMS/ESPNOTA")
user function zApEspNf(cChave)
    local jQuery     as object
    local jRet       as object
    local oCbcCarga  as object
    local oRet       as object 
    oCbcCarga       := cbcApiCarga():new()
    if (Type("oRest") != 'U')
        jQuery     := JsonObject():new()
        jRet       := JsonObject():new()
        jQuery     := oRest:getQueryRequest()
        if (jQuery <> Nil)
            jRet  := oCbcCarga:resumoPeso(jQuery['chave'])
        endif
        oRet      := oRest:setResponse(jRet:toJSon())
    else
        oRet      := oCbcCarga:resumoPeso(cChave)   
    endif
    FreeObj(oCbcCarga)
return oRet


/*
GET http://192.168.1.220:9938/ws/CBCWMS/DETCARGA?numero=00001063
{
	"DATA": [{
		"Nota": {
			"P_LIQ": 260,
			"PROT": "135210482351006",
			"CHAVE": "35210502544042000119550010002711291100032828",
			"NF": "000271129 / 1",
			"CLI": "00619601 - GUEMAT LAR E CONSTRUCAO LTDA EPP",
			"REC": 478747,
			"STS": true,
			"P_BRU": 260,
			"MSG": "",
			"VOL": "2B"
		},
		"NroOs": "30503603",
		"Bobinas": [{
			"NRO_BOB": "2020666",
			"MTR_BOB": 600,
			"TP_BOB": "B1",
			"P_BOB": 80
		}],
		"NroNf": "000271129 / 1",
        "CHV_NF": ["35210502544042000119550010002711291100032828"],
		"CCE": [
			[
			  "50210502544042000208550010000867531100231432",
			  "2021/05/07",
			  "14:34:12",
			  "CORRETO  TRANSPORTE RODOMAF"
			]
		],
		"Carga": {
			"Esp": "2-B",
			"Bobina": 2,
			"PesoTara": 0,
			"Fardos": 0,
			"Carreteis": 0,
			"Pallet": 0,
			"Caixas": 0,
			"Rolos": 0,
			"PesoBruto": 260,
			"STS": true,
			"MSG": "",
			"PesoLiqui": 260
		},
		"Interno": {
			"P": [{
				"ordemSeparacao": "",
				"tara": 0.0,
				"operador": "",
				"paletizar": true,
				"data": "2021-04-27T18:46:53.000Z",
				"idPesagem": 2,
				"pesagem": false,
				"estorno": false,
				"nPesoBruto": 0.0,
				"uniqueId": "",
				"manual": true,
				"peso": 0
			}],
			"STS": true,
			"MSG": ""
		}
	}],
	"PB_OS": 6261.8,
	"PB_EXP": 0,
	"PB_NOTA": 6261.8,
	"PB_BOB": 3671.5,
	"OC": "00001063",
	"STS": false,
	"MSG": ""
}
*/


/*
    Leonardo Bolognesi
    07/05/2021
    http://192.168.1.220:7873/ws/CBCWMS/XMLININFO?chave=35220162462676000154550010004957351284482818
    u_zEntXmIn('35220162462676000154550010004957351284482818')
    Obter os detalhes de uma carga,ver json exemplo mais a baixo
*/
@Get("CBCWMS/XMLININFO")
user function zEntXmIn(cChave)
    local jQuery     as object
    local jRet       as object
    local oRet       as object 
    if (Type("oRest") != 'U')
        jQuery     := JsonObject():new()
        jRet       := JsonObject():new()
        jQuery     := oRest:getQueryRequest()
        if (jQuery <> Nil)
            jRet  := U_zApiXmlEnt(jQuery['chave'])
        endif
        oRet      := oRest:setResponse(jRet:toJSon())
    else
        oRet      := U_zApiXmlEnt(cChave)
    endif
return oRet


/* TEST ZONE */
user function zxtApCar()
    u_zApDtCar('00001449')
return nil
